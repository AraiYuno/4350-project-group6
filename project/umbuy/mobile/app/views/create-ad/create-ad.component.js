"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var advertisement_1 = require("../../api/advertisement");
var advertisement_service_1 = require("../../services/advertisement.service");
var router_1 = require("@angular/router");
// import * as AWS from 'aws-sdk';
var CreateAdComponent = /** @class */ (function () {
    function CreateAdComponent(_advertisementService, _router) {
        this._advertisementService = _advertisementService;
        this._router = _router;
        this.userId = 1;
        this.newAd = new advertisement_1.Advertisement();
        this.acceptedMimeTypes = [
            'image/gif',
            'image/jpeg',
            'image/png'
        ];
        this.fileDataUri = '';
        this.errorMsg = '';
        this.hasImage = false;
    }
    CreateAdComponent.prototype.ngOnInit = function () { };
    CreateAdComponent.prototype.postAdvertisement = function () {
        var isValid;
        isValid = this.validate();
        if (isValid) {
            this.createAd();
            this.backToHomePage();
        }
    };
    CreateAdComponent.prototype.validate = function () {
        var isValid = true;
        var title;
        var category;
        var description;
        if (this.title == null || this.title.replace(/\s+/, "").length <= 0) {
            alert("Please enter a title");
            isValid = false;
        }
        else if (this.price == null) {
            alert("Please enter a price");
            isValid = false;
        }
        else if (this.category == null || this.category.replace(/\s+/, "").length <= 0) {
            alert("Please enter a category");
            isValid = false;
        }
        else if (this.description == null || this.description.replace(/\s+/, "").length <= 0) {
            alert("Please enter a description");
            isValid = false;
        }
        return isValid;
    }; //end validate
    CreateAdComponent.prototype.createAd = function () {
        var _this = this;
        // TODO: change so that we take userid from logged in user
        this.newAd.userId = 1;
        this.newAd.title = this.title;
        this.newAd.description = this.description;
        this.newAd.price = this.price;
        this.newAd.category = this.category;
        // TODO: Users should be able to upload multiple images.
        if (this.hasImage == true)
            this.newAd.imageUrl = 'https://s3.amazonaws.com/kyleteam6best/' + this.image.name; // reference to S3
        else
            this.newAd.imageUrl = 'https://s3.amazonaws.com/kyleteam6best/default.jpg';
        // To validate the new advertisement
        this._advertisementService.createAd(this.newAd).subscribe(function (res) { return _this.res = res; }, function (err) { return _this.error = err; });
    };
    CreateAdComponent.prototype.backToHomePage = function () {
        this._router.navigate([""]);
    };
    __decorate([
        core_1.ViewChild('fileInput'),
        __metadata("design:type", Object)
    ], CreateAdComponent.prototype, "fileInput", void 0);
    CreateAdComponent = __decorate([
        core_1.Component({
            selector: "mobile-createAd",
            moduleId: module.id,
            templateUrl: "./create-ad.component.html",
            styleUrls: ['./create-ad.component.css']
        }),
        __metadata("design:paramtypes", [advertisement_service_1.AdvertisementService, router_1.Router])
    ], CreateAdComponent);
    return CreateAdComponent;
}());
exports.CreateAdComponent = CreateAdComponent;
//# sourceMappingURL=data:application/json;base64,